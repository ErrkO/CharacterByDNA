<Documentation>
    <members name="character">
        <CharTemp>
            <summary>Struct that holds a simplified version of the <c>Character</c> class</summary>
        </CharTemp>
        <Character>
            <summary>The Character class. Stores information for the character</summary>
        </Character>
        <CID>
            <summary>Gets or sets the ID Property</summary>
            <value>Int: Unique identifier for the character</value>
        </CID>
        <Fname>
            <summary>Gets or sets the Fname Property</summary>
            <value>String: First name of the character</value>
        </Fname>
        <Lname>
            <summary>Gets or sets the Lname Property</summary>
            <value>String: Last name of the character</value>
        </Lname>
        <DNA>
            <summary>Gets or sets the DNA Property</summary>
            <value>String: string containing character info</value>    
        </DNA>
        <Gender>
            <summary>Gets or sets the Gender Property</summary>
            <value>Bool: True->Male, False->Female</value>
        </Gender>
        <BirthTime>
            <summary>Gets or sets the birthtime Property</summary>
            <value>Double: In-simulation creation time</value>
        </BirthTime>
        <DueDate>
            <summary>Gets or sets the Duedate Property</summary>
            <value>Double: In-simulation date when pregnancy ends</value>
        </DueDate>
        <SpouseID> 
            <summary>Gets or sets the SpouseID Property</summary>
            <value>Int: Identifier reference for another character</value>
            <remarks>Holds the identifier for the characters spouse</remarks>
        </SpouseID>
        <Dead>
            <summary>Gets or sets the Dead boolean Property</summary>
            <value>Bool: True-> character is dead</value>
        </Dead>
        <Racee>
            <summary>Gets or sets the Race property</summary>
            <value>Race: Object that contains <c>Race</c> information</value>
        </Racee>
        <Strength>
            <summary>Gets the strength value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Strength>
        <StrMod>
            <summary>Gets the Strength modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"> for the function
            </see>
        </StrMod>
        <Intelligence>
            <summary>Gets the Intelligence value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Intelligence>
        <IntMod>
            <summary>Gets the Intelligence modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </IntMod>
        <Dexterity>
            <summary>Gets the Dexterity value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Dexterity>
        <DexMod>
            <summary>Gets the Dexterity modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </DexMod>
        <Constitution>
            <summary>Gets the Constitution value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Constitution>
        <ConMod>
            <summary>Gets the Constitution modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </ConMod>
        <Wisdom>
            <summary>Gets the Wisdom value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Wisdom>
        <WisMod>
            <summary>Gets the Wisdom modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </WisMod>
        <Luck>
            <summary>Gets the Luck value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Luck>
        <LukMod>
            <summary>Gets the Luck modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </LukMod>
        <Charisma>
            <summary>Gets the Charisma value</summary>
            <value>Int: Gets the average of the DNA values that represent this attribute</value>
        </Charisma>
        <ChaMod>
            <summary>Gets the Charisma modifier</summary>
            <value>Int: Value of the modifier</value>
            <example>
                See <see cref="Character.GetMod(int)"/> for the function
            </example>
        </ChaMod>
        <Height>
            <summary>Gets the height value</summary>
            <value>Int: Gets the height value from the DNA information and from the race object</value>
        </Height>
        <HairColor>
            <summary>Gets the hair color from the DNA information</summary>
            <value>String: Name of the hair color</value>
            <example>
                See <see cref="Character.GetProperty(int,int,List<string>)"/> for the function
            </example>
        </HairColor>
        <EyeColor>
            <summary>Gets the eye color from the DNA information</summary>
            <value>String: Name of the eye color</value>
            <example>
                See <see cref="Character.GetProperty(int,int,List<string>)"/> for the function
            </example>
        </EyeColor>
        <SkinColor>
            <summary>Gets the skin color from the DNA information</summary>
            <value>String: Name of the skin color</value>
            <example>
                See <see cref="Character.GetProperty(int,int,List<string>)"/> for the function
            </example>
        </SkinColor>
        <CharTempC1>
            <summary>Constructor for the CharTemp Struct. Sets all of the values</summary>
            <param name="cid">Int: Identifer</param>
            <param name="dna">String: Encoded Information</param>
            <param name="gender">Bool: True -> Male</param>
            <param name="birth">Double: Creation time</param>
            <param name="due">Double: Time when pregnancy comes to fruition</param>
            <param name="sid">Int: Reference to another character</param>
            <param name="dead">Bool: True -> Is dead</param>
        </CharTempC1>
        <CharTempC2>
            <summary>Constructor for the CharTemp Struct. Sets values based on an existion character</summary>
            <param name="character">Character: </param>
        </CharTempC2>
        <CharacterC1>
            <summary>Constructor that Sets all values</summary>
            <param name="id">Int: Character identifier</param>
            <param name="fname">String: First name</param>
            <param name="lname">String: Last name</param>
            <param name="dna">String: Dna information</param>
            <param name="gender">Bool: True -> Male</param>
            <param name="btime">Double: Birth time in numeric form</param>
            <param name="dtime">Double: Due date in numeric form</param>
            <param name="sid">Int: Spouse reference id</param>
            <param name="dead">Bool: True -> is dead</param>
        </CharacterC1>
        <CharacterC2>
            <summary>Constructor to intilize a new character from DNA</summary>
            <param name="dna">String: DNA information</param>
            <param name="time">Double: Current time in numeric form</param>
            <param name="id">Int: Unique identifier</param>
            <param name="NDB">NameDB: Database connection for Names</param>
        </CharacterC2>
        <CharacterC3>
            <summary>Constructor to create new character from parents</summary>
            <param name="dad"><c>Character</c>: Object for the father</param>
            <param name="mom"><c>Character</c>: Object for the mother</param>
            <param name="time">Double: date value</param>
            <param name="id">Int: Unique Identifier</param>
            <param name="NDB"><c>NameDB</c>: Name Database object</param>
            <returns></returns>
        </CharacterC3>
        <CharacterC4>
            <summary>Constructor to create a character from the struct</summary>
            <param name="chart">CharTemp: Temporary character struct</param>
            <param name="fname">String: First name</param>
            <param name="lname">String: Last name</param>
        </CharacterC4>
        <GetProperty>
            <summary>Gets the property from the Race database</summary>
            <param name="value">Int: Integer value for the first gene that is held by the DNA</param>
            <param name="valuetwo">Int: Integer value for the second gene that is held by the DNA</param>
            <param name="properties">List[string]: The list of property strings</param>
            <returns>The string of the property</returns>
        </GetProperty>
        <GetMod>
            <summary>Gets The modifier value from the attribute score</summary>
            <param name="score">Int: The value of the attribute</param>
            <returns>The modier value</returns>
            <example>Round Down((score)/2)-5)</example>
        </GetMod>
        <IsPregnent1>
            <summary>Checks to see if the current character is pregnent</summary>
            <returns>Bool: True -> is pregnent</returns>
        </IsPregnent1>
        <IsPregennt2>
            <summary>Checks to see if a Character is pregnent</summary>
            <param name="character">Character: The character object</param>
            <returns>Bool: True -> is pregnent</returns>
        </IsPregennt2>
        <ToString>
            <summary>The Tostring method for this class</summary>
            <returns>string of character information</returns>
        </ToString>
    </members>
    <members name="characterdb">
        <CharacterDB>
            <summary>The Child class for <c>Database</c> that conects to the character table. Also has specific functions for use with characters</summary>
        </CharacterDB>
        <FamTree>
            <summary>Gets or sets the FamTree property</summary>
            <value>FamilyTreeDB: Family Tree database object</value>
            <remarks>To Be Deprecated (?)</remarks>
        </FamTree>
        <CharacterDBC>
            <summary>Creates a database object that is specific to the character table</summary>
            <param name="db">Database: Database object that holds the character table</param>
        </CharacterDBC>
        <GetCharacter>
            <summary>Gets a character from the table with an id</summary>
            <param name="id">Int: Unique identifier for the character to be found</param>
            <returns>Character: Character object that matches the identifier</returns>
            <remarks>This function already exists in the parent class - To Be Deprecated</remarks>
        </GetCharacter>
        <Query>
            <summary>Private method to run a query</summary>
            <param name="query">String: Prebuilt SQL query</param>
            <returns>List[Character] List of characters that meet the query specifications</returns>
            <remarks>I'm thinking about refactoring this function into a few different functions so I can get more specific information from the database</remarks>
        </Query>
        <GetAllCharacters>
            <summary>Gets all of the character objects in the table</summary>
            <returns>List[Character]: list of character ojects</returns>
        </GetAllCharacters>
        <FillListWithViableCharacters>
            <summary>Gets all of the characters that the life simulator requires</summary>
            <param name="time">GTime: Current time of the simulator</param>
            <returns>List[Character]: List of character objects</returns>
            <remarks>Function needs to be reworked</remarks>
        </FillListWithViableCharacters>
        <SaveCharacter>
            <summary>Saves a character object into the table</summary>
            <param name="character">Character: Character to be saved</param>
        </SaveCharacter>
        <SaveListOfCharacters>
            <summary>Uses the SaveCharacter function to save a list of characters</summary>
            <param name="characters">List[Characters]: List of characters to be saved into the table</param>
        </SaveListOfCharacters>
        <InsertCharacter>
            <summary>Inserts a new character into the table</summary>
            <param name="character">Character: Character object to be inserted</param>
        </InsertCharacter>
        <UpdateCharacter>
            <summary>Updates an existing character in the table</summary>
            <param name="character">Character: Character object to be updated</param>
        </UpdateCharacter>
        <GetNumberOfAliveCHaracters>
            <summary>Gets the number of characters in the table that are alive</summary>
            <returns>Int: number of characters that are alive</returns>
        </GetNumberOfAliveCHaracters>
        <GetNumberOfDeadCharacters>
            <summary>Gets the number of characters in the table that are dead</summary>
            <returns>Int: number of characters that are dead</returns>
        </GetNumberOfDeadCharacters>
        <GetNumberOfSingleCharacters>
            <summary>Gets the number of characters in the table that are single</summary>
            <returns>Int: number of characters that are single</returns>
        </GetNumberOfSingleCharacters>
        <NumOfRowsInTable>
            <summary>Returns the number of characters in the table</summary>
            <returns>Int: Number of characters in the table</returns>
            <remarks>This is an overridden function from the parent <c>Database</c> class</remarks>
        </NumOfRowsInTable>
        <InTable>
            <summary>Gets a character from the table with an id</summary>
            <param name="id">Int: Unique identifier for the character to be found</param>
            <returns>Character: Character object that matches the identifier</returns>
            <remarks>overridden function from the parent <c>Database</c> class</remarks>
        </InTable>
    </members>
    <members name="codon">

    </members>
    <members name="codonstatic">
        <CodonStatic>
            <summary>Static class that contains lookup information for the genes</summary>
            <remarks>A Gene consists of 3 <see cref="Nucleotide"/> , it is an encoded value</remarks>
        </CodonStatic>
        <TranslateCodon>
            <summary>Translates a codon into its respective value</summary>
            <param name="codon">Int: codon value to be translated</param>
            <returns>Int: decoded value</returns>
        </TranslateCodon>
        <ToList>
            <summary>This method returns the allele in the form of a list</summary>
            <returns>Returns a list of the alleles in their positions</returns>
        </ToList>
    </members>
    <members name="database">
        <Database>
            <summary>The Database class handles all of the connections to the tables and other database tasks</summary>
        </Database>
        <BadChars>
            <summary>An Array of the bad characters that cannot be in strings</summary>
            <value>" ",/,>,<,?,",',:,\,|,*</value>
        </BadChars>
        <Extension>
            <summary>Holds the file extension for the database file</summary>
            <value>".db"</value>
        </Extension>
        <Version>
            <summary>Version of the database</summary>
            <value>"Version=3"</value>
        </Version>
        <UncompleteConn>
            <summary>The Uncomplete connection string to connect to the database</summary>
            <value>"URI=file:D:\Users\erico\Code_Projects\CharacterByDNA\Database\"</value>
            <remarks>Need to change this to be more dynamic</remarks>
        </UncompleteConn>
        <RecreateDbSql>
            <summary>Connection string to the RecreateDB.sql file</summary>
            <value>"D:\Users\erico\Code_Projects\CharacterByDNA\Database\RecreateDB.sql"</value>
            <remarks>Need to make this more dynamic</remarks>
        </RecreateDbSql>
        <InitDbSql>
            <summary>Connection string to the InitDB.sql file</summary>
            <value>"D:\Users\erico\Code_Projects\CharacterByDNA\Database\InitializeDB.sql"</value>
            <remarks>Need to make this more dynamic</remarks>
        </InitDbSql>
        <SqlConn>
            <summary>Connection string for the database for my desktop</summary>
            <value>"URI=file:D:\Users\erico\Code_Projects\CharacterByDNA\Database\Game.db;Version=3"</value>
            <remarks>Need to make this more dynamic</remarks>
        </SqlConn>
        <SQLCONN>
            <summary>The SQLiteConection object for the database class</summary>
            <value>Sqlite connection information</value>
        </SQLCONN>
        <DbName>
            <summary>Get or set the databases name</summary>
            <value>String: Name of the database</value>
            <remarks>I don't rememeber why this is here</remarks>
        </DbName>
        <DatabaseC1>
            <summary>The Default Constructor for the Database class</summary>
        </DatabaseC1>
        <DatabaseC2>
            <summary>Constructor that takes a filename and checks to see if that database was created if not it creates a new database</summary>
            <param name="filename">String: Name of the database file</param>
            <param name="isCreated">Bool: True -> is created</param>
        </DatabaseC2>
        <NumOfRowsInTable>
            <summary>Virtual function for getting all of the items in a child table</summary>
            <return>Int: The number of items returned</return>
            <remarks>Virtual function, this one does nothing</remarks>
        </NumOfRowsInTable>
        <CheckExtension>
            <summary>Checks the string to see if it contains the file extension</summary>
            <param name="str">String: To be checked</param>
            <returns>Bool: True -> has the extension</returns>
        </CheckExtension>
        <CheckFilename>
            <summary>Checks the string to see if it contains any of the bad characters</summary>
            <param name="str">String: To be checked</param>
            <returns>Bool: True -> the string does not contain any bad characters</returns>
        </CheckFilename>
        <InitDB>
            <summary>Runs the InitDb.sql script</summary>
            <remarks>The script initializes a new database</remarks>
        </InitDB>
        <ReInitDB>
            <summary>Runs the RecreateDb.sql script</summary>
            <remarks>The script recreates the database</remarks>
        </ReInitDB>
        <CountQuery>
            <summary>Returns an integer count based on the requirements of the supplied query</summary>
            <param name="query">String: Contains requirements needed from the database</param>
            <returns>Int: Total of whatever is returned from the database</returns>
        </CountQuery>
        <NonQuery>
            <summary>Executes a query that doesnt return anything</summary>
            <param name="nonquery">Query that Inserts, Updates, Or Deletes from the database</param>
        </NonQuery>
        <InTable>
            <summary>Virtual Function that checks to see if a row is in the table</summary>
            <param name="id">Int: Unique Row Identifier</param>
            <returns>Bool: True -> is in the table</returns>
            <remarks>Virtual function, does not work</remarks>
        </InTable>
    </members>
    <members name="dna">

    </members>
    <members name="dnastatic">
        <DNAStatic>
            <summary>Class that contains the information for DNA</summary>
        </DNAStatic>
        <Length>
            <summary>Gets the Length of the DNA strand</summary>
            <value>Int: 78</value>
            <remarks>The number of <see cref="Nucleotide"/> in a strand of DNA</remarks>
        </Length>
        <Numgenes>
            <summary>Gets the Number of genes in a strand of DNA</summary>
            <value>Int: 26</value>
            <remarks>The number of <see cref="GeneStatic"/> in a strand of DNA</remarks>
        </Numgenes>
        <CreateChildsDNA>
            <summary>Creates a child strand of DNA from two parent strands</summary>
            <param name="parent1">String: DNA information for the first parent </param>
            <param name="parent2">String: DNA information for the second parent</param>
            <returns>String: Child DNA information</returns>
        </CreateChildsDNA>
        <NewDNA1>
            <summary>Creates a new strand of dna</summary>
            <param name="rngesus">Random: random number generator</param>
            <returns>String: New DNA strand</returns>
            <remarks>ALL HAIL RNGESUS!!!</remarks>
        </NewDNA1>
        <NewDNA2>
            <summary>Creates a new strand of dna</summary>
            <param name="gender">Bool: True -> Male</param>
            <param name="rngesus">Random: random number generator</param>
            <returns>String: New DNA strand</returns>
            <remarks>ALL HAIL RNGESUS!!!</remarks>
        </NewDNA2>
        <Miosis>
            <summary>Splits a Gene Pair into a half sized DNA strand that contains half of the information</summary>
            <param name="dna">String: DNA to be split</param>
            <param name="rngesus">Random: random number generator</param>
            <returns>String: half of the information from the original DNA strand</returns>
            <remarks>ALL HAIL RNGESUS!!!</remarks>
        </Miosis>
        <GetGeneValues>
            <summary>Turns a DNA strand into a list of int genes</summary>
            <param name="dna">String: DNA information</param>
            <returns>List[Int]: Genes as integers</returns>
            <remarks>No references - To Be Deprecated (?)</remarks>
        </GetGeneValues>
        <GetGenePairValue>
            <summary>Gets the average value of the Gene pair</summary>
            <param name="dna">String: DNA information</param>
            <param name="position">Int: Gene Position</param>
            <returns>Int: Average value of the gene pair</returns>
            <remarks>If the position is either 1 or 2 it will return 0 or 1 for the gender bool</remarks>
        </GetGenePairValue>
        <ToList>
            <summary>Turns the DNA information into a list of genes</summary>
            <param name="dna">String: DNA information</param>
            <returns>List[String]: list of genes</returns>
        </ToList>
    </members>
    <members name="event">

    </members>
    <members name="familytreedb">
        <FTree>
            <summary>Struct that contains the information for the tree</summary>
        </FTree>
        <FamilyTreeDB>
            <summary>Class that handles the table interaction for the Family Tree</summary>
        </FamilyTreeDB>
        <Person>
            <summary>Gets or sets the Person ID</summary>
            <value>Int: The identifier for the person</value>
        </Person>
        <Relationship>
            <summary>Gets or sets the relationship type</summary>
            <value>Int: The identifier for the relationship type</value>
        </Relationship>
        <Relation>
            <summary>Gets or sets the Relation id (the person being realted to)</summary>
            <value>Int: The identifier for the relation</value>
        </Relation>
        <FTreeC>
            <summary>Constructor for the FTree struct</summary>
            <param name="p">Int: The person id</param>
            <param name="r">Int: The relationship id</param>
            <param name="rid">Int: The realtion id</param>
        </FTreeC>
        <DB>
            <summary>Gets or sets the database connection</summary>
            <value>Database: the database object</value>
        </DB>
        <FamilyTreeDBC>
            <summary>The constructor for the family tree class</summary>
            <param name="db">Database: The database to use</param>
        </FamilyTreeDBC>
        <Query>
            <summary>Gets a list of relationships that match the supplied query</summary>
            <param name="query">String: Query in string form</param>
            <returns>List[FTree]: list of relationships</returns>
        </Query>
        <NonQuery>
            <summary>executes a query that doesn't return anything</summary>
            <param name="nonquery">String: </param>
        </NonQuery>
        <GetAllRelationsToID>
            <summary>Gets all of the relations to the given ID</summary>
            <param name="id">Int: Identifier for the character</param>
            <returns>List[FTree]: List of relations to the character</returns>
        </GetAllRelationsToID>
        <HasSpouse1>
            <summary>Checks to see if a character has a spouse</summary>
            <param name="character">Character: Character object</param>
            <returns>Bool: True -> Has spouse</returns>
            <remarks>Seems redundant since the characters store a bool value for if they have a spouse</remarks>
        </HasSpouse1>
        <HasSpouse2>
            <summary>Checks to see if a character has a spouse</summary>
            <param name="id">Int: Identifier for the character</param>
            <returns>Bool: True -> Has Spouse</returns>
            <remarks>Seems redundant since the characters store a bool value for if they have a spouse</remarks>
        </HasSpouse2>
        <SetChild1>
            <summary>Sets a relationship between a parent and a child</summary>
            <param name="parent">Character: Parent character</param>
            <param name="child">Character: Child character</param>
        </SetChild1>
        <SetChild2>
            <summary>Sets a relationship between a parent and a child</summary>
            <param name="parent">CharTemp: Parent character</param>
            <param name="child">CharTemp: Child character</param>
        </SetChild2>
        <SetChild3>
            <summary>Sets a relationship between a parent and a child</summary>
            <param name="parentid">Int: Parent character id</param>
            <param name="childid">Int: Child character id</param>
        </SetChild3>
        <SetSpouses1>
            <summary>Sets the relationship between two spouses</summary>
            <param name="spouse1">Character: Spouse one</param>
            <param name="spouse2">Character: Spouse two</param>
        </SetSpouses1>
        <SetSpouses2>
            <summary>Sets the relationship between two spouses</summary>
            <param name="spouse1">CharTemp: Spouse one</param>
            <param name="spouse2">CharTemp: Spouse two</param>
        </SetSpouses2>
        <SetSpouses3>
            <summary>Sets the relationship between two spouses</summary>
            <param name="spouse1id">Int: Spouse one id</param>
            <param name="spouse2id">Int: Spouse two id</param>
        </SetSpouses3>
        <GetSpouse1>
            <summary>Gets the id of the spouse from the character given</summary>
            <param name="character">Character: character object</param>
            <returns>Int: Id of the spouse</returns>
        </GetSpouse1>
        <GetSpouse2>
            <summary>Gets the id of the spouse from the character given</summary>
            <param name="character">CharTemp: character object</param>
            <returns>Int: Id of the spouse</returns>
        </GetSpouse2>
        <GetSpouse3>
            <summary>Gets the id of the spouse from the character given</summary>
            <param name="id">Int: character object id</param>
            <returns>Int: Id of the spouse</returns>
        </GetSpouse3>
        <GetParents>
            <summary>Gets the parent ids from a character</summary>
            <param name="id">Int: Identider for the child</param>
            <returns>List[Int]: two ids for the parents </returns>
        </GetParents>
        <HasParent1>
            <summary>CHecks to see if a character has a parent</summary>
            <param name="character">Character: character to check</param>
            <returns>Bool: True -> has parent</returns>
        </HasParent1>
        <HasParent2>
            <summary>CHecks to see if a character has a parent</summary>
            <param name="character">CharTemp: character to check</param>
            <returns>Bool: True -> has parent</returns>
        </HasParent2>
        <HasParent3>
            <summary>CHecks to see if a character has a parent</summary>
            <param name="id">Int: character id to check</param>
            <returns>Bool: True -> has parent</returns>
        </HasParent3>
        <GetListOfSingleCharacters>
            <summary></summary>
            <param name="size"></param>
            <returns></returns>
            <remarks>This should be depracated</remarks>
        </GetListOfSingleCharacters>
    </members>
    <members name="gdate">

    </members>
    <members name="gene">

    </members>
    <members name="genestatic">

    </members>
    <members name="gtime">

    </members>
    <members name="lifesimulator">

    </members>
    <members name="lifesimulatornew">

    </members>
    <members name="namedb">
    
    </members>
    <members name="nucleotide">

    </members>
    <members name="program">

    </members>
    <members name="race">

    </members>
</Documentation>